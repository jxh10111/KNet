from typing import Optional, List, Any

from fastapi import FastAPI, HTTPException, Depends
import uvicorn
from pydantic import BaseModel
from pydantic import Field as PydanticField

from Standardization_Pipeline.AutoMID_classifier_standarization_pipeline import StructurePipeline

from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import create_engine
from sqlmodel import SQLModel, Field, Session, select
from Standardization_Pipeline.logger import get_logger

logger = get_logger(__name__)

app = FastAPI()

# Define the allowed origins (the frontend URL)
origins = [
    "http://knet.ccs.miami.edu:8887",
    "http://localhost:5173"
]

# inputt = "{\"PLK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001284737},\"ATM\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000188418},\"GSK3B\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0023280708},\"GSK3A\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0028267927},\"SRC\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.1211248934},\"PFKFB3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000847518},\"MAPK14\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0509214662},\"ABL1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":1.0},\"CDK5\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0019699323},\"MAPKAPK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0005644528},\"MAPK11\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0013052431},\"MAPK9\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0007472347},\"BTK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0021529603},\"CDC2L6\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001676713},\"CDK19\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0019149929},\"ALK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0007167689},\"IKBKE\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001743367},\"FGFR1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0068372893},\"GRK5\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001570104},\"TYRO3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0005329755},\"CHEK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0015978041},\"MAP2K1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001792201},\"CDK8\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0037794784},\"MAPK8\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000441694},\"PIM1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000010176},\"NEK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0005647658},\"MAP2K2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001939752},\"LRRK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000887397},\"PDGFRB\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.1422940791},\"TNK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0090529127},\"FYN\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0293345731},\"KDR\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0374191329},\"MAP4K2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0105104344},\"TAOK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0004245544},\"PKM\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002114172},\"MAPK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0029816513},\"CDK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0009399308},\"CDK4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000515711},\"PDGFRA\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0186563861},\"EGFR\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0175852384},\"FLT1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0574099347},\"JAK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0010738197},\"JAK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0028802492},\"JAK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0011698109},\"TYK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0007007617},\"ERBB2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0156076327},\"PRKACA\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003228747},\"RET\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0128986845},\"YES1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0104204258},\"AURKA\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0085750911},\"PIM3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000224777},\"PRKCA\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000185244},\"MKNK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0004669174},\"MKNK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001266629},\"MTOR\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0034299421},\"PIM2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000110597},\"CSNK2A1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000134053},\"FLT3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.1190002859},\"MET\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0009975814},\"PIK3CD\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001030888},\"AKT1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0010399229},\"AKT2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0014434657},\"RPS6KB1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0012206298},\"HIPK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002639633},\"CLK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0006698149},\"DYRK1A\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0054310183},\"CSNK2A2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000627196},\"CSNK1A1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0007538683},\"ZAP70\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0014291558},\"KIT\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.6552097797},\"LCK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0679261684},\"MAPK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0005135886},\"ROCK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0016746948},\"CSK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0045241178},\"AURKB\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0019705165},\"CSF1R\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0418012142},\"PRKCI\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000638405},\"CHUK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003086923},\"PIK3CG\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0006709906},\"CLK4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0011682741},\"DYRK1B\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0015150852},\"CLK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0010383349},\"PLK4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003882116},\"PLK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001950658},\"PTK2B\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0005042179},\"IGF1R\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0450254418},\"PDPK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0016909227},\"ROCK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0041756686},\"BUB1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.00175236},\"CDK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002498995},\"RAF1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0150559684},\"INSR\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0030307975},\"MAP4K4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0055552144},\"MYLK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002071086},\"IKBKB\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0022034792},\"CDK7\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001187875},\"LIMK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0018869098},\"CDK9\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0014420069},\"RPS6KA5\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0006674636},\"PRKCZ\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001176944},\"RPS6KA3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0021210094},\"PRKCG\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000225632},\"STK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.001921817},\"AKT3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0009814135},\"DAPK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000379665},\"MARK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0006391199},\"PRKD2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0007027809},\"SGK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000075681},\"MARK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0006427356},\"CHEK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001850308},\"PRKCD\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000363394},\"PRKAA1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0006208661},\"PAK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002654522},\"PRKD1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003481301},\"CAMK2B\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000664728},\"IRAK4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0034415757},\"PAK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0059977565},\"CSNK1D\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0017366844},\"EPHA2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0075456719},\"ERBB4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0017349191},\"MAPK12\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0030001064},\"MAPK13\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0008643974},\"FLT4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0053283144},\"LYN\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0578583963},\"NTRK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0154337427},\"NTRK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0092703104},\"PAK4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0023099147},\"ITK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0057356469},\"FGFR3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0022884612},\"SGK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000223066},\"BLK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0055187857},\"CDC42BPA\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001980037},\"GSG2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002225156},\"NUAK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000181304},\"PKN1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000723975},\"PRKACB\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002056068},\"PRKCH\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000124188},\"PRKG1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0017210409},\"PRKX\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001480728},\"PTK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0005078032},\"MAPK10\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0034121894},\"PRKDC\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000422834},\"PIK3CA\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0029938559},\"ROS1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0011167396},\"PRKG2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001534892},\"IRAK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0117808152},\"MINK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0011221074},\"PHKG2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001923548},\"PKN2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001854994},\"STK17A\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0005587377},\"TSSK1B\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001206819},\"DYRK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002594894},\"HIPK4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0027181625},\"BRSK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001233786},\"FRK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0517305136},\"MAP4K5\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0061179986},\"PBK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000015375},\"FER\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0009396046},\"SLK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0029239273},\"DCLK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000576443},\"SRPK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002982573},\"MAP3K20\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0047098044},\"SRMS\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0073852222},\"AXL\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0026712618},\"FES\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003120102},\"SYK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0081893569},\"NTRK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0039339126},\"PRKD3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0006256226},\"MELK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000239287},\"CAMK2D\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001846761},\"CAMK2G\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001362592},\"CDC7\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000194388},\"CSNK1G1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003298597},\"CSNK1G2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001538127},\"CSNK1G3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001883381},\"TSSK1A\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001226711},\"CLK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001193018},\"TNIK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0020146742},\"PKLR\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000098502},\"PRKCB\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000587935},\"GRK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002030525},\"TTK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0026556721},\"BRAF\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0693998039},\"TBK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002041815},\"TAOK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002163568},\"MAP3K8\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0006278693},\"CAMKK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0004460516},\"PIK3CB\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000710443},\"GCK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0011354221},\"PIP4K2A\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003980946},\"PRKCQ\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000313696},\"ADK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003400544},\"LTK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0007635547},\"ACVR1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0008212277},\"MST1R\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0007958235},\"PTK6\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0020307647},\"FGFR2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0033897038},\"PASK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000120117},\"STK24\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002336122},\"PAK7\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002032228},\"WEE1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001301535},\"PRKCE\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000287904},\"MAP3K5\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0093871458},\"CDK6\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000183096},\"LIMK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0008599951},\"TEK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0256873798},\"EPHB4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0049734171},\"EPHB2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0016596586},\"BMX\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0027916855},\"RIPK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0027166565},\"TGFBR1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0123431636},\"KHK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001889763},\"CDK12\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000100437},\"MARK4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003986817},\"FGFR4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0009056382},\"AURKC\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0030552375},\"IKBKG\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0011521073},\"AAK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000291315},\"PIKFYVE\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001722978},\"HIPK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001330382},\"STK10\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0005998841},\"PIP4K2C\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000155501},\"GAK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0010533547},\"MAP3K1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000051858},\"EPHA7\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001942781},\"MAP3K2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001277619},\"EIF2AK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0011191481},\"CDK17\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000329013},\"FGR\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0054727704},\"EPHA5\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0012311832},\"LATS1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000086909},\"BMP2K\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003420198},\"DCK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001624131},\"STK4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001373585},\"RPS6KA1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0006728604},\"MAP2K5\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0007346902},\"RPS6KA4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001752273},\"ILK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000146195},\"ULK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001530098},\"EPHA1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0004091396},\"MAPK7\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002951418},\"HCK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0119790109},\"ABL2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0139018465},\"EPHB6\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0018764352},\"SIK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0089862542},\"MAP3K11\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000391364},\"SIK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0083559016},\"TNK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0004550972},\"IRAK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001463285},\"NEK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0},\"NLK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0008588752},\"ERN1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000002857},\"DDR1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0441939235},\"DDR2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0234518629},\"TGFBR2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001706625},\"STK26\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001685001},\"BMPR1A\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001614982},\"ATR\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000052444},\"RPS6KA6\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000974687},\"ULK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001339155},\"MERTK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001942276},\"ARAF\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0013064726},\"EPHB3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0004164354},\"BMPR1B\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002594315},\"ACVR1B\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0005163299},\"BMPR2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0004362819},\"MAPK15\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.00016564},\"PKMYT1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002031709},\"TEC\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0005895094},\"CSNK1E\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0004232507},\"MAP4K3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002400865},\"EPHA4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0014233576},\"CDK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000266949},\"CDK13\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000759625},\"CDK16\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000118733},\"MAP4K1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0013620869},\"ACVRL1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002528696},\"PIK3C3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000980562},\"PRKACG\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003196984},\"EPHA6\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0009692127},\"EPHA8\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0013591676},\"DYRK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001449636},\"NUAK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000375022},\"PIP4K2B\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0006787542},\"TAB1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003285932},\"PI4KA\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000989174},\"PIK3C2B\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000764646},\"PI4KB\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003118717},\"MAP3K9\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003044906},\"RIPK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000602316},\"ULK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001350884},\"PDK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000467103},\"EIF2AK4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0005605866},\"MAP3K10\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001280198},\"SMG1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0004218463},\"SIK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0073463516},\"EIF2AK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0060079899},\"TXK\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0004050617},\"PIK3R4\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0015711172},\"SPHK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001626247},\"PDK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002978079},\"PIK3C2G\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001035306},\"PIK3C2A\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000647477},\"SPHK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002513222},\"DAPK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000621021},\"STK17B\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002374575},\"ADRBK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001384856},\"GRK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001515549},\"PHKA1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000021628},\"MAP3K12\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002319226},\"MAP3K14\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001648002},\"RPS6KA2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0014452024},\"MAP3K7\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0011736548},\"PAK3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0001832893},\"TK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0004537016},\"STK33\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.000120869},\"PLK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000489162},\"MAP3K19\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0014177716},\"RIOK2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000694453},\"EPHA3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0007861967},\"PRKAA2\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0003603137},\"TIE1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002444428},\"TNNI3K\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0015256666},\"RIOK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000737293},\"ERBB3\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0002413771},\"DGKA\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000008489},\"DGKZ\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000007516},\"PGK1\":{\"CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5\":0.0000342156}}"
# input_dict = json.loads(inputt)
# Add CORS middleware to allow the specified origins
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # List of allowed origins
    allow_credentials=True,  # If you need to allow cookies or credentials
    allow_methods=["*"],     # Allow all HTTP methods
    allow_headers=["*"],     # Allow all headers
)

# %%
import deepchem as dc
import numpy as np
import pandas as pd
from rdkit import Chem
from rdkit.Chem import rdMolDescriptors
import tensorflow as tf


class SmilesMapping(BaseModel):
    personal_id: str = Field(alias="personalId")
    smiles_code: str = Field(alias="smilesCode")

    class Config:
        populate_by_name = True


class SmilesInput(BaseModel):
    smiles: list[SmilesMapping]

    class Config:
        populate_by_name = True




class SmilesValidationResult(BaseModel):
    smiles: str
    is_valid: bool
    error_message: str = None


class SmilesStandardizerResult(BaseModel):
    is_valid: bool = PydanticField(alias="isValid")
    personal_id: str = PydanticField(alias="personalId")
    original_smiles: str = PydanticField(alias="originalSmiles")
    canonical_smiles: Optional[str] = PydanticField(alias="canonicalSmiles")
    desalted_smiles: Optional[str] = PydanticField(alias="desaltedSmiles")
    neutralized_smiles: Optional[str] = PydanticField(alias="neutralizedSmiles")
    tautomer_standardized_smiles: Optional[str] = PydanticField(alias="tautomerStandardizedSmiles")


# Define the SQLModel for the predictions table
class Prediction(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    cutoff_version: str
    smiles_code: str
    kinase_name: str
    prediction_value: float

    __table_args__ = (
        # Ensure unique combinations of cutoff_version, smiles_code, and kinase_name
        {'sqlite_autoincrement': True},
    )

# Initialize the database
DATABASE_URL = "sqlite:////data/predictions.db"
engine = create_engine(DATABASE_URL, echo=False)

def init_db():
    SQLModel.metadata.create_all(engine)


def get_session():
    with Session(engine) as session:
        yield session


def get_predictions_from_db(cutoff_version: str, smiles_list: List[str], session: Session):
    # Query the database for existing predictions
    statement = select(Prediction).where(
        Prediction.cutoff_version == cutoff_version,
        Prediction.smiles_code.in_(smiles_list)
    )
    results = session.exec(statement).all()
    if not results:
        return pd.DataFrame()

    # Organize the data into a DataFrame
    data = []
    for pred in results:
        data.append({
            'smiles': pred.smiles_code,
            'kinase': pred.kinase_name,
            'value': pred.prediction_value
        })
    df = pd.DataFrame(data)
    pivot_df = df.pivot(index='smiles', columns='kinase', values='value')
    return pivot_df


def save_predictions_to_db(cutoff_version: str, predictions_df: pd.DataFrame, session: Session):
    data_to_insert = []
    for smiles_code in predictions_df.index:
        for kinase_name in predictions_df.columns:
            prediction_value = predictions_df.at[smiles_code, kinase_name]
            prediction = Prediction(
                cutoff_version=cutoff_version,
                smiles_code=smiles_code,
                kinase_name=kinase_name,
                prediction_value=prediction_value
            )
            data_to_insert.append(prediction)
    # Bulk save
    session.bulk_save_objects(data_to_insert, return_defaults=False)
    session.commit()


def init_cutoff7():
    model = dc.models.RobustMultitaskClassifier(
        n_tasks=328,
        n_features=1024,
        layer_sizes=[2000, 500],
        weight_init_stddevs=[.02, .02],
        bias_init_consts=[.5, .5],
        weight_decay_penalty=.0001,
        weight_decay_penalty_type='l2',
        dropouts=[.25, .25],
        activation_fns=tf.nn.relu,
        n_classes=2,
        bypass_layer_sizes=[200, 50],
        bypass_weight_init_stddevs=[.02, .02],
        bypass_bias_init_consts=[.5, .5],
        bypass_dropouts=[.25, .25],
        learning_rate=.0003,
        batch_size=128,
        # optimizer='adam',
        seed=123,
        model_dir=r'/data/dc_keras_model_KAPI_328targets_cutoff7_epoch100')

    # Restore the trained model
    model.restore()
    return model
# %%
def init_cutoff6():
    model = dc.models.RobustMultitaskClassifier(
        n_tasks=406,
        n_features=1024,
        layer_sizes=[2000, 500],
        weight_init_stddevs=[.02, .02],
        bias_init_consts=[.5, .5],
        weight_decay_penalty=.0001,
        weight_decay_penalty_type='l2',
        dropouts=[.25, .25],
        activation_fns=tf.nn.relu,
        n_classes=2,
        bypass_layer_sizes=[200, 50],
        bypass_weight_init_stddevs=[.02, .02],
        bypass_bias_init_consts=[.5, .5],
        bypass_dropouts=[.25, .25],
        learning_rate=.0003,
        batch_size=128,
        seed=123,
        model_dir=r'/data/dc_keras_model_KAPI_406targets_cutoff6_epoch100')
    model.restore()
    return model

def calc_fp(smiles, fp_size, radius):
    mol = Chem.MolFromSmiles(smiles)
    fp = rdMolDescriptors.GetMorganFingerprintAsBitVect(mol, radius, nBits=fp_size)
    a = np.zeros((0,), dtype=np.float32)
    Chem.DataStructs.ConvertToNumpyArray(fp, a)
    return a

def run(model_version: str, smiles_list: list[str], train_data_url, column_names_url):
    if model_version == "cutoff6":
        model = model_cutoff6
    if model_version == "cutoff7":
        model = model_cutoff7
    try:
        train = dc.data.DiskDataset(train_data_url)
        kinase_tasks = train.get_task_names()

        nd_descs = [calc_fp(smiles, 1024, 2) for smiles in smiles_list]
        fp = np.asarray(nd_descs, dtype=np.float32)
        if len(fp.shape) == 1:
            fp = np.reshape(fp, (1, -1))
        o = np.ones((fp.shape[0], len(kinase_tasks)))
        d = dc.data.DiskDataset.from_numpy(fp, o, tasks=kinase_tasks)

        y = np.squeeze(np.delete(model.predict(d), 0, 2))
        y = (y - y.min()) / (y.max() - y.min())
        if len(y.shape) == 1:
            y = np.reshape(y, (1, -1))

        yy = pd.DataFrame(y)

        df = pd.read_csv(column_names_url)
        col_names = df.columns[1:]
        yy.columns = col_names

        if len(smiles_list) == len(yy):
            yy.index = smiles_list
        yy.index.name = 'smiles'

        return yy

    except Exception as e:
        raise

model_cutoff6 = init_cutoff6()
model_cutoff7 = init_cutoff7()

init_db()


def _run_prediction(input_data: SmilesInput,session: Session, cutoff_version: str, train_data_url: str, column_names_url: str):
    smile_results = _standardize_smiles(input_data.smiles)
    standardized_smiles_list = [smiles.tautomer_standardized_smiles for smiles in smile_results if smiles.tautomer_standardized_smiles]
    logger.info(standardized_smiles_list)
    # Get existing predictions from the database
    existing_predictions = get_predictions_from_db(cutoff_version, standardized_smiles_list, session)
    existing_smiles = existing_predictions.index.tolist() if not existing_predictions.empty else []

    # Determine which SMILES codes need predictions
    missing_smiles = list(set(standardized_smiles_list) - set(existing_smiles))

    if missing_smiles:
        new_predictions = run(cutoff_version, missing_smiles,
                              train_data_url,
                              column_names_url)
        # Save new predictions to the database
        save_predictions_to_db(cutoff_version, new_predictions, session)

        # Combine existing and new predictions
        if existing_predictions.empty:
            final_predictions = new_predictions
        else:
            final_predictions = pd.concat([existing_predictions, new_predictions])
    else:
        final_predictions = existing_predictions
    final_predictions = final_predictions.loc[standardized_smiles_list]
    extended_predictions = transform_predictions(final_predictions,smile_results)
    return extended_predictions


@app.post("/predict/cutoff6/")
def predict_cutoff6(input_data: SmilesInput, session: Session = Depends(get_session)):
    cutoff_version = 'cutoff6'
    train_data_url = '/data/dc_Keras_406targets_cutoff6_saved/090124/dataset/train'
    column_names_url = "/data/ChEMBL34_KKBQ224_data_081924_406targets_cutoff6.csv.gz"
    try:
        predictions = _run_prediction(input_data, session, cutoff_version, train_data_url, column_names_url)
        return {"prediction": predictions}
    except Exception as err:
        logger.error(err)
        raise HTTPException(status_code=400, detail=str(err))


@app.post("/predict/cutoff7/")
def predict_cutoff7(input_data: SmilesInput, session: Session = Depends(get_session)):
    cutoff_version = 'cutoff7'
    train_data_url = '/data/dc_Keras_328targets_cutoff7_saved/090224/dataset/train'
    column_names_url = "/data/ChEMBL34_KKBQ224_data_081924_328targets_cutoff7.csv.gz"
    try:
        predictions = _run_prediction(input_data, session, cutoff_version, train_data_url, column_names_url)
        return {"prediction": predictions}
    except Exception as err:
        raise HTTPException(status_code=400, detail=str(err))


@app.post("/standardize-smiles", response_model=List[SmilesStandardizerResult])
async def validate_smiles(smiles_request: SmilesInput):
    smiles_list = smiles_request.smiles
    return _standardize_smiles(smiles_list)


def _standardize_smiles(smiles_list):
    validation_results = []
    pipeline = StructurePipeline()
    for smiles in smiles_list:
        try:
            structure = pipeline.process(smiles.smiles_code)
            validation_results.append(SmilesStandardizerResult(originalSmiles=structure.S0,
                                                               canonicalSmiles=structure.S1,
                                                               desaltedSmiles=structure.S2,
                                                               neutralizedSmiles=structure.S3,
                                                               tautomerStandardizedSmiles=structure.S4,
                                                               personalId=smiles.personal_id,
                                                               isValid=True,
                                                               ))
        except Exception:
            validation_results.append(SmilesStandardizerResult(originalSmiles=smiles.smiles_code,
                                                               canonicalSmiles=None,
                                                               desaltedSmiles=None,
                                                               neutralizedSmiles=None,
                                                               tautomerStandardizedSmiles=None,
                                                               personalId=smiles.personal_id,
                                                               isValid=False
                                                               ))
    return validation_results


def transform_predictions(predictions_df: pd.DataFrame, smiles_results: List[SmilesStandardizerResult]) -> List[dict]:
    # Create a lookup dictionary for SMILES metadata
    smiles_mapping = {
        result.tautomer_standardized_smiles: {
            "personal_id": result.personal_id,
            "original_smiles": result.original_smiles
        }
        for result in smiles_results if result.tautomer_standardized_smiles
    }

    # Transform predictions to the new structure
    transformed = []
    for smiles, row in predictions_df.iterrows():
        metadata = smiles_mapping.get(smiles, {})
        # Combine metadata and row values directly
        entry = {
            "standardizedSmiles": smiles,
            "originalSmiles": metadata.get("original_smiles"),
            "personalId": metadata.get("personal_id"),
            **row.to_dict()  # Add each compound directly as a key-value pair
        }
        transformed.append(entry)

    return transformed


if __name__ == "__main__":
    init_db()
    uvicorn.run(app, host="0.0.0.0", port=8001)
